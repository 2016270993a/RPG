input(name='attr_version' type='hidden' value='2.010')

//- CHARACTER SHETE PAGE
input.sheet_type(name='attr_sheet_type' type='hidden' value='pc')

//- CHARACTER TYPE (MUNDANE < MAGIC < RESONANCE)
input.character-type(name='attr_flag_special' type='hidden' value='mundane')

//- MIXINS
include src/pug/_mixins.pug

.pc
	.tabs
		img(alt='Shadowrun black and metallic logo' src='https://raw.githubusercontent.com/Roll20/roll20-character-sheets/master/Shadowrun5thEdition/images/ShadowrunLogo.png')
		h1(data-i18n='character') Character
		label(data-i18n-title='character name' title='character name')
			input(type='text' name='attr_character_name' placeholder='Character name' title='@{character_name}')
		h1(data-i18n='player') Player
		label(data-i18n-title='player name' title='player name')
			input(type='text' name='attr_player_name' placeholder='Player name' title='@{player_name}')
		h2(data-i18n-title='/w GM') /w GM
		label.switch(data-i18n-title='whisper rolls to gm' title='whisper rolls to gm')
			input.whisper-toggle(name='attr_gm_toggle' type='checkbox' value='/w gm')
			span.slider
		each val, key in {'wounds': '@{wounds}', 'modifiers':'?{Modifiers +/-|0}', 'edge':'@{edge}'}
			h2(data-i18n-title=key) #{key}
			label.switch(data-i18n-title=key title=key)
				input.whisper-toggle(name='attr_'+key+'_toggle' type='checkbox' value=val)
				span.slider
		button(name='d6' title='Roll D6s' type='roll' value='@{gm_toggle} &{template:rolls}{{header=^{d6}}}{{base=^{d6}}}{{dice=[[(?{d6s|0}d6>5)]]}}') L
		button.pictos(name='act_tab_options' title='@{tab}' type='action' ) y
		input(name='attr_tab' type='hidden' value='core')
		each val in ['core', 'arms', 'augs', 'gear', 'magic', 'matrix', 'social', 'vehicle']
			button(data-i18n=val name='act_tab_'+val type='action' title='@{tab}') #{val}

	input.options_toggle(name='attr_tab' type='hidden' value='options')
	//- STATIC TAB
	.static.pc-col
		include src/static.html
		//- SKILLS
		.pc-row
			.header
				- const skillTypes = {'Active': 'active', 'Knowledge': 'know', 'Language': 'lang'}
				each val, key in skillTypes
					- const attrName = key.toLowerCase();
					.header.htab
						.triangle
						input.tab-switch(name='attr_skill_toggle' title=key + ' skills' type='radio' value=attrName)
						h1(data-i18n=val) #{val}..
						.right-tri
				.triangle
				h1(data-i18n='skills') Skills
			.border-box.skill-box
				.pc-box.medium-box
					.rows-long
						each val in ['Skill', 'RTG', 'Attribute', 'Limit']
							- const translationKey = val.toLowerCase();
							h3(data-i18n=translationKey) #{val}
					input.tab-switch(name='attr_skill_toggle' type='hidden' value='active')
					each val, key in {'active': ['active', 'Agility', 'Physical'],'knowledge':['know', 'Logic', 'Mental'], 'language': ['lang', 'Charisma', 'Social']}
						div(class='skills-'+val[0])
							if val === 'active'
								.rows-long
									input(name='attr_default_display' type='hidden' value='Agility')
									+rollButton('default', '@{default_display}', '@{default_attribute}+-1')
									span.text-align-center -
									select.attribute-select(name='attr_default_attribute' title='Skill attribute')
										+attributeSelect('Agility')
									select.limit-select(name='attr_limit' title='Skill limit')
										+limitSelect('Physical')
							fieldset(class='repeating_' + val[0])
								input.settings-toggle(name='attr_flag' type='hidden' value='settings')
								input(name='attr_display_rating' type='hidden')
								input(name='attr_display_specialization' type='hidden' value='')
								input(name='attr_display_limit' type='hidden' value=val[2])
								input(name='attr_display_attribute' type='hidden' value=val[1])
								input(name='attr_dicepool' type='hidden' value='0')
								.rows-long.border-bottom
									.buttons
										//- SKILL BUTTON
										+skillButton(false)
										//- SPECILIZATION BUTTON
										+skillButton(true)
									span.text-align-center(name='attr_display_rating' title='Skill rating')
									select.attribute-select(name='attr_attribute' title='Skill attribute')
										+attributeSelect(val[1])
									select.limit-select(name='attr_limit' title='Skill limit' value='physical_limit')
										+limitSelect(val[2])
									button.pictos(name='act_skill' type='action') x
								.settings-grid.rows-long
									if val === 'active'
										select.skill-select(name='attr_skill' title='Active skill' value='Close Combat Group')
											include src/pug/skillselect.html
									else
										label(data-i18n-title='skill' title='skill')
											input(name='attr_skill' placeholder=val title=val+' skill name' type='text' )
									label(data-i18n='rating')
										input(name='attr_rating' min='0' placeholder='0' title='Skill rating' type='number')
									label(data-i18n-title='ratingmodifier' title='Rating Modifier')
										span(data-i18n='ratingmodifier') Rating Modifier
										input(name='attr_rating_modifier' min='0' placeholder='0' title='Skill rating bonus' type='number' )
									label(data-i18n-title='specializations' title='Specializations') 
										span(data-i18n='specializations') Specializations
										input(name='attr_specialization' placeholder='Specalizations' title='Skill specializations' type='text')
									label(data-i18n-title='notes' title='notes')
										span(data-i18n='notes') Notes
									textarea(name='attr_notes' value='' placeholder='Notes')


	//- CORE TAB
	include src/core.html

	//- ARMS TAB
	include src/arms.html

	//- AUGS TAB
	include src/augs.html

	//- GEAR TAB
	include src/gear.html

	//- MAGIC TAB
	include src/magic.html

	//- MATRIX TAB
	include src/matrix.html

	//- SOCIAL TAB
	include src/social.html

	//- VEHICLE TAB
	include src/vehicle.html

	//- OPTIONS TAB
	include src/options.html

//- NPCs
.npc
	.tabs
		img(alt='Shadowrun black and metallic logo' src='https://raw.githubusercontent.com/Roll20/roll20-character-sheets/master/Shadowrun5thEdition/images/ShadowrunLogo.png')
		h2(data-i18n-title='/w GM') /w GM
		label.switch(data-i18n-title='whisper rolls to gm' title='whisper rolls to gm')
			input.whisper-toggle(name='attr_gm_toggle' type='checkbox' value='/w gm')
			span.slider
		each val, key in {'wounds': '@{wounds}', 'modifiers':'?{Modifiers +/-|0}', 'edge':'@{edge}'}
			h2(data-i18n-title=key) #{key}
			label.switch(data-i18n-title=key title=key)
				input.whisper-toggle(name='attr_'+key+'_toggle' type='checkbox' value=val)
				span.slider
		button(name='d6' title='Roll D6s' type='roll' value='@{gm_toggle} &{template:rolls}{{header=^{d6}}}{{base=^{d6}}}{{dice=[[(?{d6s|0}d6>5)]]}}') L
		select(name='attr_sheet_type' title='Sheet Type')
			each val in ['Grunt', 'Host', 'Sprite', 'Vehicle', 'PC']
				- const attrName = val.toLowerCase();
				option(value=attrName data-i18n=attrName) #{val}
		input(name='attr_stats_toggle' type='checkbox' value='settings' checked)
		span.pictos y
	input(name='attr_stats_toggle' type='hidden' value='settings')
	
	//- ATTRIBUTES
	.grunt.attribute
		each val in coreAttributeArray
			- const attrName = val.toLowerCase();
			+npcAttributeButton(attrName, '@{'+attrName+'}+@{attribute_roll}')
			span(name='attr_display_'+attrName)
			label.settings(data-i18n-title=val title=val)
				input(name='attr_'+attrName+'_base' placeholder='3' title='@{'+attrName+'_base}' type='number' value='3')
			label.settings(data-i18n-title='modifier' title='modifier')
				input(name='attr_'+attrName+'_modifier' placeholder='+' title='@{'+attrName+'_modifier}' type='number' value='')
		//- EDGE
		+npcAttributeButton('edge', '@{edge}+@{attribute_roll}')
		span(name='attr_edge')
		label.settings(data-i18n-title='edge' title='edge')
				input(name='attr_edge' placeholder='3' title='@{edge}' type='number' value='3')
		//- ESSENCE
		h1(data-i18n='ess') ess
		span(name='attr_essence')
		label.settings(data-i18n-title='essence' title='essence')
			input(name='attr_essence' placeholder='6' title='@{essence}' type='number' value='6')
		each val, key in {'magic': 'magic', 'force': 'magic', 'resonance': 'resonance'}
			- const abbreviation = key.slice(0,1);
			h1(class='hide-'+val data-i18n=abbreviation) #{abbreviation}
			span(class='hide-'+val name='attr_'+key)
			label.settings(class='hide-'+val data-i18n-title=key title=key)
				input(name='attr_'+key placeholder='6' title='@{'+key+'}' type='number' value='6')
	.host.attribute
		+hostSprite(hostObject, 'host_rating')
	.vehicle.attribute
		each val, key in {'Hand': ['handling', 'hand'], 'Hand (Off)': ['handling_offroad', 'handoff'], 'Speed': ['speed', 'speed'], 'Speed (Off)': ['speed_offroad', 'speedoff'], 'Accel': ['acceleration', 'accel'], 'Body': ['body', 'body'], 'Pilot': ['pilot', 'pilot'], 'Sensor': ['sensor', 'sensor'], 'Seat': ['seating', 'seat']}
			if key === 'Pilot'
				+rollButton(val[1], '^{pilot}', '@{pilot}+@{pilot}')
			else
				h1(data-i18n=val[1]) #{key}
			span(name='attr_'+val[0])
			label.settings(data-i18n-title=val[1] title=key)
				input(name='attr_'+val[0] placeholder='3' title='@{'+val[0]+'}' type='number' value='')
	.sprite.attribute
		+hostSprite(spriteObject, 'level')
	
	//-BODY
	.body
		.column
			h1.settings(data-i18n='bonuses') Bonuses
			//- PROFESSIONAL RATINGS
			input(name='attr_pr' type='hidden' value='')
			.rows.grunt
				h2(data-i18n='pr') Professional Rating
				span(name='attr_pr' style='margin-left: 2%;')
				label.settings(data-i18n-title='pr' title='Professional Rating')
					input(name='attr_pr' title='@{pr}' type='number')
			
			//- INITAITIVE
			each val, key in {'Initiative': ['initiative', 'initiative', 'grunt'], 'Astral Initiative': ['astral', 'astralinitiative', 'grunt hide-magic'], 'Matrix Initiative': ['matrix', 'matrixinitiative', 'grunt vehicle sprite host']}
				.rows(class=val[2])
					+initiativeRoll(key, val[0], val[1])
					label.settings(data-i18n-title='modifier' title='modifier')
						input(name='attr_'+val[0]+'_modifier' placeholder='0' title='@{'+val[0]+'_modifier}' type='number' value='0')
					span.settings +
					label.settings(data-i18n-title='modifierdice' title='Modifier Dice')
						input(min='0' max='4' name='attr_'+val[0]+'_dice_modifier' placeholder='0' title='@{'+val[0]+'_dice_modifier}' type='number' value='0')
					span.settings(data-i18n='d6') d6
					span.settings.tiny-span() =
					span(name='attr_display_'+val[0]+'_mod')
					span.tiny-span() +
					span(name='attr_'+val[0]+'_dice')
					span.tiny-span(data-i18n='d6') d6
			
			//- MOVEMENT
			.rows.grunt
				h2(data-i18n='movement') Movement
				- const movementObject = {'walk': ' / ', 'run': ' / + ', 'movement_mod': ''}
				each val, key in movementObject
					- const translationKey = key.includes('mod') ? 'movement' : key;
					- const placeholderValue = key.includes('movement') ? '2' : '0';
					label.settings(data-i18n-title=translationKey + ' modifier' title=translationKey + ' modifier')
						input(name='attr_'+key+'_modifier' placeholder=placeholderValue title='@{'+key+'_modifier}' type='number' value=placeholderValue)
					span.settings #{val}
				span.settings.tiny-span() =
				each val, key in movementObject
					span(name='attr_'+key title='@{'+key+'}')
					span #{val}
			
			//- CONDITION MONITORS
			.rows.grunt
				button(data-i18n='conditionmonitorps' name='act_cond_reset' type='action') Condition Monitor (P/S)
				+conditionMonitor(['physical', 'stun'])
			.rows.vehicle
				button(data-i18n='conditionmonitorpm' name='act_cond_reset' type='action') Condition Monitor (P/M)
				+conditionMonitor(['physical', 'matrix'])
			.rows.host.sprite
				button(data-i18n='conditionmonitorm' name='act_cond_reset' type='action') Condition Monitor (M)
				span(name='attr_matrix')

			//- PHYSICAL, MENTAL, SOCIAL
			.rows.grunt
				each val in ['Physical', 'Mental', 'Social']
					- const attrName = val.toLowerCase();
					h2(data-i18n=attrName) val
					label.settings(data-i18n-title='modifier' title='modifier')
						input(name='attr_'+attrName+'_limit_modifier' placeholder='0' title='@{'+attrName+'_limit_modifier}' type='number' value='0')
					span.settings.tiny-span() =
					span(name='attr_'+attrName+'_limit' title='@{'+attrName+'_limit}')
			
			//- PAIN TOLERANCE
			.rows.grunt.pain-tolerance
				h2(data-i18n='paintolerance') Pain Tolerance
				label.settings(data-i18n-title='paintolerance' title='paintolerance')
					input(name='attr_pain_tolerance' min='-1' max='3' placeholder='0' title='@{pain_tolerance}' type='number' value='0')
				em
					span(data-i18n='painfooter') Low Pain Tolernace adds a -1 and High Pain Tolerance adds a +1 per rank.
			
			//- MATRIX ATTRIBUTES
			.rows.vehicle
				each val, key in {'Data Processing': ['data_processing', 'data_processing'], 'Firewall': ['firewall', 'firewall'], 'Device Rating': ['device_rating', 'devicerating']}
					.rows
						h2(data-i18n=val[1]) key
						label.settings(data-i18n-title=val[1] title=val[1]) 
							input(name='attr_'+val[0] min='0' placeholder='0' title='@{'+val[0]+'}' type='number' value='')
						span.settings.tiny-span() =
						span(name='attr_'+val[0])

		//- MODIFIERS				
		.column
			h1.settings(data-i18n='modifier') Modifier
			.rows
				+rollButton('armorrating', 'base', '@{soak}')
				label.settings(data-i18n-title='armorrating' title='armorrating')
					input(,ame='attr_armor_rating' placeholder='9' title='@{armor_rating}' type='number' value='0')
			each val, key in {'Defense': ['defense', 'defense'], 'Soak': ['soak', 'soak'], 'Acid Protection': ['acid', 'acidprotection'], 'Cold Protection': ['cold', 'coldprotection'], 'Electrical Protection': ['electrical', 'electricalprotection'], 'Fire Protection': ['fire', 'fireprotection'], 'Radiation Protection': ['radiation', 'radiationprotection']}
				.rows
					+rollButton(val[1], 'base', '@{soak}+@{'+val[0]+'_modifier}')
					label.settings(data-i18n-title=val[1] title=val[1])
						input(name='attr_'+val[0]+'_modifier' placeholder='0' title='@{'+val[0]+'_modifier}' type='number' value='0')
					span.settings.tiny-span() =
					if (key === 'Defense' || key === 'Soak')
						span(name='attr_'+val[0])
					else
						span(name='attr_'+val[0]+'_protection')

		///- OPTIONS
		.column
			.rows
				h1.settings(data-i18n='options') Options
			.rows
				each val, key in {'Mundane': ['mundane', 'mundane'], 'Awakened': ['awakened', 'magic'], 'Emerged': ['emerged', 'resonance']}
					label.settings(data-i18n-title=val[0] title=val[0])
						input.character-type(name='attr_flag_special' title='@{flag_special}' type='radio' value=val[1])
						h2(data-i18n=val[0]) key
			.rows
				label.settings(data-i18n-title=matrixdevice title='Matrix Device')
					input.character-type(name='attr_flag_matrix' title='@{flag_matrix}' type='checkbox' value='matrix')
					h2(data-i18n=matrixdevice) Matrix Device
			.rows.vehicle
				label.settings(data-i18n-title=drone title='Drone')
					input.character-type(name='attr_flag_drone' title='@{flag_drone}' type='checkbox' value='drone')
					h2(data-i18n=drone) Drone

		//TEXTBOXES
		each val, key in {'Qualities': 'grunt', 'Augmentations': 'grunt', 'Gear': 'grunt vehicle', 'Programs': 'vehicle', 'Modifications': 'vehicle', 'Powers': 'grunt hide-magic', 'Weakness': 'grunt hide-magic'}
			- const attrName = key.toLowerCase();
			input(name='attr_'+attrName type='hidden' value='')
			.textrow(class=val)
				h1(data-i18n=attrName) key
				span(name='attr_'+attrName)
				label.settings(data-i18n-title=attrName title=key)
					textarea(name='attr_'+attrName placeholder=key title='@{'+attrName+'}')

		each val, key in {'Initiate': ['grunt hide-magic', 'metamagic'],'Submersion': ['grunt hide-resonance', 'echos']}
			- const attrName = key.toLowerCase();
			.textrow(class=val[0])
				input(name='attr_'+attrName type='hidden' value='')
				h1(data-i18n=attrName) key
				span(name='attr_'+attrName)
				label.settings(data-i18n-title=attrName title=key)
					input(name='attr_'+attrName placeholder=attrName type='number' title='@{'+attrName+'}')
				br
				span(name='attr_'+val[1])
				label.settings(data-i18n-title=val[1] title=val[1])
					textarea(name='attr_'+val[1] placeholder=val[1] title='@{'+val[1]+'}')


		//- SKILLS
		each val, key in {'active': ['skills', 'Agility', 'Physical'],'knowledge':['knowledgeskills', 'Logic', 'Mental'], 'language': ['languageskills', 'Charisma', 'Social']}
			.rows.grunt.repeating
				h1(data-i18n=val[0]) #{val[0]}
				fieldset(class='repeating_'+key)
					input(name='attr_display_rating' type='hidden')
					input(name='attr_display_specialization' type='hidden' value='')
					input(name='attr_display_limit' type='hidden' value=val[2])
					input(name='attr_display_attribute' type='hidden' value=val[1])
					input(name='attr_dicepool' type='hidden' value='0')
					input(name='attr_flag' title='Settings toggle' type='checkbox' checked)
					span.pictos x
					//- SKILL BUTTON
					+skillButton(false)
					//- SPECILIZATION BUTTON
					+skillButton(true)
					span(name='attr_display_rating')
					.settings
						h2(data-i18n='skill') Skill
						h2(data-i18n='rating') Rating
						h2(data-i18n='ratingmodifier') Rating Modifier
						h2(data-i18n='attribute') Attribute
						h2(data-i18n='limit') Limit
						if key === 'active'
							select.skill-select(name='attr_skill' title='@{repeating_'+key+'_${x}_skill}' value='Close Combat Group')
								include src/pug/skillselect.html
						else
							label(data-i18n-title='skill' title='skill')
								input(name='attr_skill' placeholder=key title='@{repeating_'+key+'_${x}_skill}' type='text' )
						label(data-i18n-title='rating' title='rating')
							input(name='attr_rating' min='0' placeholder='0' title='@{repeating_'+key+'_${x}_rating}' type='number')
						label(data-i18n-title='ratingmodifier' title='Rating Modifier')
							input(name='attr_rating_modifier' min='0' placeholder='0' title='@{repeating_'+key+'_${x}_rating_modifier}' type='number' )
						select.attribute-select(name='attr_attribute' title='@{repeating_'+key+'_${x}_attribute')
							+attributeSelect(val[1])
						select.limit-select(name='attr_limit' title='@{repeating_'+key+'_${x}_limit}' value='physical_limit')
							+limitSelect(val[2])
						h2.full-row(data-i18n='specializations') Specializations
						label.full-row(data-i18n-title='specializations' title='Specializations') 
							input(name='attr_specialization' placeholder='Specalizations' title='@{repeating_'+key+'_${x}_specialization}' type='text')

		.rows.sprite.repeating
			h1(data-i18n='skills') skills
			fieldset(class='repeating_active')
				input(name='attr_flag' title='Settings toggle' type='checkbox' checked)
				span.pictos x
				//- SKILL BUTTON
				+spriteButton('skill', 'display')
				.settings
					h2.full-row(data-i18n='skill') Skill
					select.skill-select(name="attr_skill" title='@{repeating_'+key+'_${x}_skill}')
						include src/pug/skillsselectsprite.html

		.rows.sprite.repeating
			h1(data-i18n='powers') Powers
			fieldset(class='repeating_powers')
				input(name='attr_flag' title='Settings toggle' type='checkbox' checked)
				span.pictos x
				+spriteButton('power', 'power')
				.settings
					h2.full-row(data-i18n='power') power
					label.full-row(data-i18n-title='power' title='power')
						input(name='attr_power' placeholder='power' title='@{repeating_powers_${x}_power}' +' power name' type='text' )
					h2.full-row(data-i18n='notes') Notes
					label.full-row(data-i18n-title="notes" title="notes")
						textarea(name="attr_notes" placeholder="Powers notes" title='@{repeating_powers_${x}_notes}' value="")


								

//- FOOTER
include src/footer.html

//- ROLL TEMPLATES
include src/rolltemplates.html

//- HIDDEN
include src/hidden.html

//- SCRIPTS
include src/pug/scripts.js

//- SCRIPTS
include src/importer.html