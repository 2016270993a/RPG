- const coreAttributeArray = ['Body', 'Agility', 'Reaction', 'Strength', 'Willpower', 'Logic', 'Intuition', 'Charisma'];
- const attributesArray = ['Body', 'Agility', 'Reaction', 'Strength', 'Willpower', 'Logic', 'Intuition', 'Charisma', 'Magic', 'Resonance'];
- const spellCatagories = ['Combat', 'Detection', 'Health', 'Illusion', 'Manipulation'];
- const spellTypes = ['Mana', 'Physical'];
- const spellRanges = ['LOS', 'LOS (A)', 'Special', 'T', 'T (A)'];
- const spellDurations = ['Instant', 'Permanent', 'Special', 'Sustained'];
- const spellCombatTypes = ['Force ', 'Direct, Force ', 'Indirect, Force ?{Force|}, AP -'];
- const limitObject = {'Mental':'mental_limit', 'Physical':'physical_limit', 'Social':'social_limit', 'Attack':'attack', 'Data Processing':'data_processing', 'Firewall':'firewall', 'Sleaze':'sleaze'};
- const hostObject = {'Host Rating': ['host_rating', '5'], 'Attack': ['attack', '5'], 'Sleaze': ['sleaze', '6'], 'Data Processing': ['data_processing', '7'], 'Firewall': ['firewall', '8']};
- const spriteObject = {'Level': ['level', '5'], 'Attack': ['attack', '5'], 'Sleaze': ['sleaze', '6'], 'Data Processing': ['data_processing', '7'], 'Firewall': ['firewall', '8']};
- const npcWeaponsObject = {'Range': {'type': 'select', 'default': 'range'}, 'Dice': {'type': 'number', 'placeholder': '18'},'Name': {'type': 'text', 'placeholder': 'Ares Predator'}, 'Type': {'type': 'text', 'placeholder': 'Heavy Pistol'}, 'Reach': {'type': 'number', 'placeholder': '0'}, 'ACC': {'type': 'text', 'placeholder': '5'},'Dam': {'type': 'text', 'placeholder': '9P'},  'AP': {'type': 'number', 'placeholder': '-2'},'Modes': {'type': 'text', 'placeholder': 'SA/BF/FA'},'Recoil': {'type': 'text', 'placeholder': '+2'},'Ammo': {'type': 'number', 'placeholder': '15'}, 'Notes': {'type': 'text', 'placeholder': 'w/ 3 clips of explosive rounds'}};
- const npcSpellObject = {'Category': {'type': 'select', 'default': 'combat', 'array': spellCatagories}, 'Dice': {'type': 'number', 'placeholder': '18'}, 'Name': {'type': 'text', 'placeholder': 'Fireball'}, 'Type': {'type': 'select', 'default': 'P', 'array': spellTypes}, 'Range': {'type': 'select', 'default': 'LOS', 'array':spellRanges}, 'Duration': {'type': 'select', 'default': 'Instant', 'array':spellDurations}, 'Drain': {'type': 'number', 'placeholder': '-1'}, 'Combat': {'type': 'select', 'default': 'Force', 'array':spellCombatTypes}, 'Dam': {'type': 'text', 'placeholder': 'P'}, 'Notes': {'type': 'text', 'placeholder': 'may start fires'}};

//- DIE ROLL VARIABLES
- const rollBeginging = '@{gm_toggle} &{template:rolls}{{mod=[[@{modifiers_toggle}]]}}{{wound=[[@{wounds_toggle}]]}}{{edge=[[@{edge_toggle}]]}}';
- const rollEnding = '+@{wounds_toggle}+@{modifiers_toggle}+@{edge_toggle})d6>5@{explode_toggle}]]}}';

//- ROLL BUTTON
mixin rollButton(header, base, rollFormula)
    button(data-i18n=header name=header type='roll' value!=rollBeginging+'{{header=^{'+header+'}}}{{base='+base+'}}{{dice=[[(('+rollFormula+')'+rollEnding) #{header}

//- SKILL BUTTON
mixin skillButton(specialization)
    - const rollName = specialization === true ? 'specialization' : 'skill';
    - const rollFormula = specialization === true ? '@{dicepool}+@{attribute}+2' : '@{dicepool}+@{attribute}';
    - const desc = specialization === true ? 'Spec: @{specialization}, @{display_limit}' : '@{display_limit}';
    - const display = specialization === true ? 'attr_display_specialization' : 'attr_display';
    button(name=rollName type='roll' value!=rollBeginging+'{{header=@{skill}}}{{base=@{display_attribute}}}{{dice=[[(('+rollFormula+')'+rollEnding+'{{desc='+desc+'}}')
        span(name=display)

//- SPRITE BUTTONS
mixin spriteButton(header, display)
    button(name=header type='roll' value!=rollBeginging+'{{header=@{'+header+'}}}{{base=^{level}}}{{dice=[[((@{level}+@{level})'+rollEnding)
        span(name='attr_'+display)

//- WEAPON BUTTON FOR NPCS
mixin weaponButton()
    button(name='weapon' type='roll' value=rollBeginging+'{{header=@{weapon_type}}}{{base=^{base}}}{{dice=[[((@{weapon_dice})'+rollEnding+'{{desc=ACC @{weapon_acc}, DV @{weapon_dv}, AP @{weapon_ap}}}{{rea=[[@{weapon_reach}]]}}')
         span(name='attr_weapon_name')

//- SPELL BUTTON FOR NPCS
mixin spellButton()
    button(name='spell' type='roll' value=rollBeginging+'{{header=@{name}}}{{base=^{base}}}{{dice=[[((@{dice})'+rollEnding+'{{desc=@{combat_type}?{Force|}, Drain [[?{Force|}+(@{drain})]]}}')
        span(name='attr_name')


//- NPC ATTRIBUTE ROLLS
mixin npcAttributeButton(attribute, rollFormula)
    - const abbreviation = attribute.slice(0,1).toLowerCase();
    button(data-i18n=abbreviation name=attribute type='roll' value!=rollBeginging+'{{header=^{'+attribute+'}}}{{base=^{base}}}{{dice=[[(('+rollFormula+')'+rollEnding) #{abbreviation}

//- ATTRIBUTE SELECTS
mixin attributeSelect(selectedDefault)
    each attribute in attributesArray
        - const attributeName = attribute.toLowerCase();
        if attribute === selectedDefault
            option(data-i18n=attributeName value='@{' + attributeName + '}' selected) #{attribute}
        else
             option(data-i18n=attributeName value='@{' + attributeName + '}') #{attribute}

//- LIMIT SElECTS
mixin limitSelect(selectedDefault)
    option(value='none') -
    each val, key in limitObject
        - const attributeName = key.toLowerCase().replace(' ', '_');
        if key === selectedDefault
            option(data-i18n=attributeName value='@{' + val + '}' selected) #{key}
        else
            option(data-i18n=attributeName value='@{' + val + '}') #{key}

//- HOST & SPRITE NPCS
mixin hostSprite(object, attrName)
    each val, key in object
        - const base = '^{'+attrName+'}', rollForumla = '@{'+attrName+'}+@{'+val[0]+'}';
        +rollButton(val[0], base, rollForumla)
        span(name='attr_'+val[0])
        label.settings(data-i18n-title=val[0] title=key)
            input(name='attr_'+val[0] placeholder=val[1] title='@{'+val[0]+'}' type='number' value='')
            
//- INITITAITVE ROLL
mixin initiativeRoll(name, attribute, translation)
    button(data-i18n=translation name=name type='roll' value!=rollBeginging+'{{header=^{'+translation+'}}}{{base=^{base}}}{{dice=[[((@{'+attribute+'_mod})+@{wounds_toggle}+@{modifiers_toggle})+(@{'+attribute+'_dice})d6cf0 &{tracker}]]}}') #{name}

//- NPC CONDITION MONITOR
mixin conditionMonitor(conditionTypes)
    each val in conditionTypes
        label.settings(data-i18n-title=val+'bonus' title=val+'bonus')
            input(name='attr_'+val+'_modifier' placeholder='0' title='@{'+val+'_modifier}' type='number' value='0')
        if val === 'physical'
            span.settings /
    span.settings.tiny-span() =
    each val in conditionTypes
        span(name='attr_'+val title='@{'+val+'_modifier}')
        if val === 'physical'
            span /